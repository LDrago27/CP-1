openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: Registered Email Id
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: Password
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
           application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by userId
      description: ''
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The Id that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: userId that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The userId that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /event:
    post:
      tags:
        - user
      summary: Create Event
      description: This can only be done by the logged in user.
      operationId: createEvent
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/xml:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
  /event/createWithList:
    post:
      tags:
        - event
      summary: Creates list of event with given input array
      description: Creates list of event with given input array
      operationId: createEventsWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'          
        default:
          description: successful operation
  /event/{eventId}:
    get:
      tags:
        - user
      summary: Get event by eventId
      description: ''
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: 'The Id that needs to be fetched'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid eventId supplied
        '404':
          description: Event not found
    put:
      tags:
        - event
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: userId that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The userId that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

components:
  schemas:
    TimeStamp:
      type: object
      properties:
        timestamp:
          type: string
          example: Date time Format (mm/dd/yyyy hh:mm:ss)
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Location:
      type: object
      properties:
        longitude:
          type: string
          description: Longitude of the location
        latitude:
          type: string
          description: Latitude of the location
        address:
          $ref: '#/components/schemas/Address'
      xml:
        name: location
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        eventId:
          type: string
          example: K2dqRTEsWywADM4GacbKISlLrtRh9bPW
        authorId:
          type: string
          example: K2dqRTEsWywADM4GacbKISlLrtRh9bPW
          description: User Id of the comment author
        likeCount:
          type: integer
          format: int64
          example: 1
        content: 
          type: string
          example: This event is organized by EGSC at Columbia University to bid farewell to graduating class.
        timeStamp:
          $ref: '#/components/schemas/TimeStamp'          
      xml:
        name: comment
    User:
      type: object
      properties:
        id:
          type: string
          example: K2dqRTEsWywADM4GacbKISlLrtRh9bPW
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '1234567890'
        userType:
          type: string
          description: type of user
          enum: [organizer, attendee]
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: user
    Tag:
      type: object
      properties:
        tagName:
          type: string
          description: Name of the Tag
          enum: [graduation, socials, club, misc , educational]
      xml:
        name: tag
    Event:
      required:
        - title
        - organizerId
        - location
        - timeStamp 
        - tags
      type: object
      properties:
        id:
          type: string
          example: K2dqRTEsWywADM4GacbKISlLrtRh9bPW
        title:
          type: string
          example: Carleton Common EGSC Social
        organizerId:
          type: string
          example: K2dqRTEsWywADM4GacbKISlLrtRh9bPW
        location:
          $ref: '#/components/schemas/Location'
        timeStamp:
          $ref: '#/components/schemas/TimeStamp'
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: event
    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        content:
          type: string
          example: Your EGSC Event has started
        userId:
          type: string
          example: K2dqRTEsWywADM4GacbKISlLrtRh9bPW
      xml:
        name: notification
    LiveStream:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        eventId:
          type: string
          example: K2dqRTEsWywADM4GacbKISlLrtRh9bPW
      xml:
        name: liveStream
    EventContent:
    type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        eventId:
          type: string
          example: K2dqRTEsWywADM4GacbKISlLrtRh9bPW
      xml:
        name: liveStream
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header